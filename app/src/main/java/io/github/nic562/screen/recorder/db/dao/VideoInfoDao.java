package io.github.nic562.screen.recorder.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import io.github.nic562.screen.recorder.db.VideoInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "VIDEO_INFO".
*/
public class VideoInfoDao extends AbstractDao<VideoInfo, Long> {

    public static final String TABLENAME = "VIDEO_INFO";

    /**
     * Properties of entity VideoInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property FilePath = new Property(1, String.class, "filePath", false, "FILE_PATH");
        public final static Property CreateTime = new Property(2, java.util.Date.class, "createTime", false, "CREATE_TIME");
        public final static Property PreviewPath = new Property(3, String.class, "previewPath", false, "PREVIEW_PATH");
        public final static Property CustomKey = new Property(4, String.class, "customKey", false, "CUSTOM_KEY");
    }


    public VideoInfoDao(DaoConfig config) {
        super(config);
    }
    
    public VideoInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"VIDEO_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"FILE_PATH\" TEXT NOT NULL ," + // 1: filePath
                "\"CREATE_TIME\" INTEGER NOT NULL ," + // 2: createTime
                "\"PREVIEW_PATH\" TEXT," + // 3: previewPath
                "\"CUSTOM_KEY\" TEXT NOT NULL );"); // 4: customKey
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_VIDEO_INFO_CREATE_TIME ON \"VIDEO_INFO\"" +
                " (\"CREATE_TIME\" ASC);");
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_VIDEO_INFO_CUSTOM_KEY ON \"VIDEO_INFO\"" +
                " (\"CUSTOM_KEY\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"VIDEO_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, VideoInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getFilePath());
        stmt.bindLong(3, entity.getCreateTime().getTime());
 
        String previewPath = entity.getPreviewPath();
        if (previewPath != null) {
            stmt.bindString(4, previewPath);
        }
        stmt.bindString(5, entity.getCustomKey());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, VideoInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getFilePath());
        stmt.bindLong(3, entity.getCreateTime().getTime());
 
        String previewPath = entity.getPreviewPath();
        if (previewPath != null) {
            stmt.bindString(4, previewPath);
        }
        stmt.bindString(5, entity.getCustomKey());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public VideoInfo readEntity(Cursor cursor, int offset) {
        VideoInfo entity = new VideoInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // filePath
            new java.util.Date(cursor.getLong(offset + 2)), // createTime
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // previewPath
            cursor.getString(offset + 4) // customKey
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, VideoInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFilePath(cursor.getString(offset + 1));
        entity.setCreateTime(new java.util.Date(cursor.getLong(offset + 2)));
        entity.setPreviewPath(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCustomKey(cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(VideoInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(VideoInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(VideoInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
